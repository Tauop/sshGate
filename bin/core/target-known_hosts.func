#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of misc functions
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__}" != 'Loaded' ]; then
  echo "ERROR: Only sshgate.core can load user.func."; exit 1;
fi

if [ "${__TARGET_KNOWN_HOSTS_FUNC__:-}" != 'Loaded' ]; then
  __TARGET_KNOWN_HOSTS_FUNC__='Loaded'

  # usage: private_TARGET_KNOWN_HOSTS_ADD <target> [ <file> ]
  # desc: force re-write of sshgate account ~/.ssh/authorized_keys2 file
  # note: if <file> is not specified, determine it with SSHGATE_ACCOUNT_HOMEDIR
  private_TARGET_KNOWN_HOSTS_ADD () {
    local target= target_port= target_real= target_ssh_config= file= proxy=

    if [ $# -ne 1 -a $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target_real=$( TARGET_REAL "$1" )
    if [ -z "${target_real}" ]; then
      ERROR "Target host '${target}' doesn't exist"; return 1;
    fi

    [ $# -eq 2 ] && file="$2"
    [ -z "${file}"   ] && file="$(SSHGATE_ACCOUNT_HOMEDIR)/.ssh/known_hosts"
    [ ! -f "${file}" ] && touch "${file}"

    target_ssh_config="${SSHGATE_DIR_TARGETS}/${target_real}/${SSHGATE_TARGETS_SSH_CONFIG_FILENAME}.$( GET_LOGIN "${target}" )"
    if [ -r "${target_ssh_config}" ]; then
      target_port=$( < "${target_ssh_config}" grep 'Port' | sed -e 's/^[^0-9]*\([0-9]*\)[^0-9]*$/\1/' )
    fi
    target_port="${target_port:-22}"

    proxy=$( TARGET_GET_CONF "${target_real}" SSH_PROXY )
    if [ -z "${proxy}" ]; then
      ssh-keyscan -H -p "${target_port}" -t dsa,rsa "${target_real}" 2>/dev/null >> "${file}"
      [ $? -ne 0 ] && return 1
    else
      TARGET_SSH_RUN_COMMAND "${proxy}" \
          "ssh-keyscan -H -p ${target_port} -t dsa,rsa '${target_real}' 2>/dev/null;" >> "${file}"
      [ $? -ne 0 ] && return 1
    fi

    chown "${SSHGATE_GATE_ACCOUNT}" "${file}"
    return 0;
  }

  # usage: private_TARGET_KNOWN_HOSTS_DEL <target> [ <file> ]
  # desc: delete the public host sshkey of the <target> from the known_hosts file
  # note: if <file> is not specified, determine it with SSHGATE_ACCOUNT_HOMEDIR
  private_TARGET_KNOWN_HOSTS_DEL() {
    local target= target_real= target_login= file= target_ssh_config= target_port= proxy=
    if [ $# -eq 0 -o $# -gt 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target="$1"
    [ $# -eq 2 ] && file="$2"

    target_login=$( GET_LOGIN "${target}" )
    target_real=$( TARGET_REAL "${target}" )
    if [ -z "${target_real}" ]; then
      ERROR "Target host '${target}' doesn't exist"; return 1;
    fi

    [ -z "${file}" ] && file="$(SSHGATE_ACCOUNT_HOMEDIR)/.ssh/known_hosts"
    [ ! -f "${file}" ] && return 0;

    target_ssh_config="${SSHGATE_DIR_TARGETS}/${target_real}/${SSHGATE_TARGETS_SSH_CONFIG_FILENAME}.${target_login}"
    if [ -r "${target_ssh_config}" ]; then
      target_port=$( < "${target_ssh_config}" grep 'Port' | sed -e 's/^[^0-9]*\([0-9]*\)[^0-9]*$/\1/' )
    fi
    target_port="${target_port:-22}"

    proxy=$( TARGET_GET_CONF "${target_real}" SSH_PROXY )
    if [ -z "${proxy}" ]; then
      ssh-keygen -R "${target_real}" -f "${file}" 2>/dev/null
      [ $? -ne 0 ] && return 1
      rm -f "${file}.old" 2>/dev/null
      [ -e "${file}"     ] && chown "${SSHGATE_GATE_ACCOUNT}" "${file}"
    else
      TARGET_SSH_RUN_COMMAND "${proxy}" \
          "ssh-keyscan -R '${target_real}' -f '${file}' 2>/dev/null;
           rm -f '${file}.old' 2>/dev/null;
           [ -e '${file}' ] && chown '${SSHGATE_GATE_ACCOUNT}' '${file}'"
      [ $? -ne 0 ] && return 1
    fi
    return 0;
  }

  # usage: private_TARGET_SSH_BUILD_KNOWN_HOSTS
  # desc: force re-write of sshgate account ~/.ssh/known_hosts file
  # important: need to be root
  private_TARGET_SSH_BUILD_KNOWN_HOSTS () {
    local home_dir= target= alias=
    home_dir=$( SSHGATE_ACCOUNT_HOMEDIR )
    if [ -z "${home_dir}" ]; then
      ERROR "Can't find home directory of ${SSHGATE_GATE_ACCOUNT} user"
      return 1;
    fi

    echo -n '' > "${home_dir}/.ssh/known_hosts"
    for target in $( TARGETS_LIST ); do
      target=$( GET_HOST "${target}" )
      echo -n "- ${target} ... "
      private_TARGET_KNOWN_HOSTS_ADD "${target}" "${home_dir}/.ssh/known_hosts"
      if [ $? -ne 0 ]; then
        # don't try for ip and alias if we failed here
        echo 'KO'
        continue
      fi
      echo 'OK'
    done

    return 0;
  }

  # usage: TARGET_SSH_UPDATE_KNOWN_HOSTS [<target>]
  # desc: update known_hosts file entry for all hosts or <target>
  TARGET_SSH_UPDATE_KNOWN_HOSTS () {
    if [ $# -gt 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    if [ $# -eq 1 ]; then
      private_TARGET_KNOWN_HOSTS_DEL "$1"      \
        && private_TARGET_KNOWN_HOSTS_ADD "$1" \
        && return 0;
    else
      private_TARGET_SSH_BUILD_KNOWN_HOSTS "$1" && return 0
    fi

    return 1; # error
  }

fi # end of: if [ "${__TARGET_KNOWN_HOSTS_FUNC__:-}" != 'Loaded' ]; then
