#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of all targets access related functions
# (users -- usergroup --> target)
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__}" != 'Loaded' ]; then
  echo "ERROR: Only sshgate.core can load user.func."; exit 1;
fi

if [ "${__TARGET_UG_ACCESS_FUNC__:-}" != 'Loaded' ]; then
  __TARGET_UG_ACCESS_FUNC__='Loaded'

  # usage: TARGET_ACCESS_LIST_USERGROUPS [<login>@]<target_host>
  # usage: TARGET_ACCESS_LIST_USERGROUPS <target_host> [<login>]
  # desc: List all groups who can access to <login>@<target>
  TARGET_ACCESS_LIST_USERGROUPS () {
    local target= login=
    if [ $# -ne 1 -a $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    if [ $# -eq 1 ]; then
      target=$( GET_HOST "$1" )
      login=$( GET_LOGIN "$1" )
    else
      target="$1"; login="$2"
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi

    TARGET_SSH_LIST_LOGINS "${target}" | grep "^${login}$" >/dev/null
    if [ $? -ne 0 ]; then
      ERROR "Login '${login}' doesn't exist on target '${target}'"; return 1;
    fi

    if [ -f "${SSHGATE_DIR_TARGETS}/${target}/${SSHGATE_TARGETS_USERGROUP_ACCESS_FILENAME}.${login}" ]; then
      cat "${SSHGATE_DIR_TARGETS}/${target}/${SSHGATE_TARGETS_USERGROUP_ACCESS_FILENAME}.${login}" | sort -u
    fi
    return 0;
  }

  # usage: TARGET_ACCESS_LIST_ALL_USERGROUPS <target_host>
  # desc: List all groups who can access to the target host, for each ssh login
  # TODO: not used / linked to the cli FTM
  TARGET_ACCESS_LIST_ALL_USERGROUPS () {
    local target= login=

    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target=$( TARGET_REAL "$1" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist"; return 1;
    fi

    for login in $( TARGET_SSH_LIST_LOGINS "${target}" ); do
      # echo "= ${login}@${target} ="
      TARGET_ACCESS_LIST_USERGROUPS "${target}" "${login}"
    done | sort -u
    return 0;
  }

  # usage: TARGET_ACCESS_ADD_USERGROUP [<login>@]<target_host> <user_group>
  # usage: TARGET_ACCESS_ADD_USERGROUP <target_host> <login> <user_group>
  # desc: Give to a usergroup access to a target host
  # note: if <login> is not given, use ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}
  TARGET_ACCESS_ADD_USERGROUP () {
    local target= login= usergroup=
    if [ $# -ne 2 -a $# -ne 3 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    if [ $# -eq 2 ]; then
      target=$( GET_HOST "$1" )
      login=$( GET_LOGIN "$1" )
      usergroup="$2"
    else
      target="$1"; login="$2"; usergroup="$3"
    fi

    if [ -z "${usergroup}" ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi
    if [ ! -f "${SSHGATE_DIR_USERS_GROUPS}/${usergroup}" ]; then
      ERROR "User group '${usergroup}' doesn't exist" ; return 1;
    fi

    private_ACL_FILE_ADD "${usergroup}" "${SSHGATE_DIR_TARGETS}/${target}/${SSHGATE_TARGETS_USERGROUP_ACCESS_FILENAME}.${login}"
    private_MAIL_APPEND "User Group ${usergroup} access to Target ${login}@${target} granted"

    return 0;
  }

  # usage: TARGET_ACCESS_DEL_USERGROUP [<login>@]<target_host> <user_group>
  # usage: TARGET_ACCESS_DEL_USERGROUP <target_host> <login> <user_group>
  # desc: Revoke usergroup access to a target host
  # note: if <login> is not given, use ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}
  TARGET_ACCESS_DEL_USERGROUP () {
    local target= login= usergroup=
    if [ $# -ne 2 -a $# -ne 3 ]; then
      BAD_ARGUMENTS ; return 1
    fi

    if [ $# -eq 2 ]; then
      target=$( GET_HOST "$1" )
      login=$( GET_LOGIN "$1" )
      usergroup="$2"
    else
      target="$1"; login="$2"; usergroup="$3"
    fi

    if [ -z "${usergroup}" ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" ]; then
      ERROR "Target  host '${target}' doesn't exist" ; return 1;
    fi
    if [ ! -f "${SSHGATE_DIR_USERS_GROUPS}/${usergroup}" ]; then
      ERROR "User group '${usergroup}' doesn't exist" ; return 1;
    fi

    private_ACL_FILE_DEL "${usergroup}" "${SSHGATE_DIR_TARGETS}/${target}/${SSHGATE_TARGETS_USERGROUP_ACCESS_FILENAME}.${login}"
    private_MAIL_APPEND "User Group ${usergroup} access to Target ${login}@${target} revoked"

    return 0;
  }

fi
