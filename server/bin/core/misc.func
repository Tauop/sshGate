#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of misc functions
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__}" != 'Loaded' ]; then
  echo "ERROR: Only sshgate.core can load user.func."; exit 1;
fi

if [ "${__MISC_FUNC__:-}" != 'Loaded' ]; then
  __MISC_FUNC__='Loaded'

  # usage: BUILD_KNOWN_HOSTS
  # desc: force re-write of sshgate account ~/.ssh/known_hosts file
  # important: need to be root
  BUILD_KNOWN_HOSTS () {
    local home_dir= target= alias=
    home_dir=$( SSHGATE_ACCOUNT_HOMEDIR )
    if [ -z "${home_dir}" ]; then
      ERROR "Can't find home directory of ${SSHGATE_GATE_ACCOUNT} user"
      return 1;
    fi

    echo -n '' > "${home_dir}/.ssh/known_hosts"
    for target in $( TARGETS_LIST ); do
      target=$( GET_HOST "${target}" )
      echo -n "- ${target} ... "
      private_ADD_TARGET_TO_KNOWN_HOST "${target}" "${home_dir}/.ssh/known_hosts"
      if [ $? -ne 0 ]; then
        # don't try for ip and alias if we failed here
        echo 'KO'
        continue
      fi
      echo 'OK'
    done

    return 0;
  }

  # usage: private_TARGET_GET_IP <target>
  # desc: get the IP of a target
  # note: if the target has a proxy, it takes the IP from the proxy
  private_TARGET_GET_IP () {
    local target= proxy= ssh_conf_file=

    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( GET_HOST "$1" )
    target=$( TARGET_REAL "$1" )
    proxy=$( TARGET_GET_CONF "${target}" SSH_PROXY )
    if [ -z "${proxy}" ]; then
      host "${target}" | grep 'address' | head -n 1 | sed -e 's/^.* \([^ ]*\)$/\1/'
    else
      TARGET_SSH_RUN_COMMAND "${proxy}" \
          "host '${target}' | grep 'address' | head -n 1 | sed -e 's/^.* \([^ ]*\)$/\1/'"
    fi
    return 0;
  }

  # usage: private_ADD_TARGET_TO_KNOWN_HOST <target> [ <file> ]
  # desc: force re-write of sshgate account ~/.ssh/authorized_keys2 file
  # note: if <file> is not specified, determine it with SSHGATE_ACCOUNT_HOMEDIR
  private_ADD_TARGET_TO_KNOWN_HOST () {
    local target= target_ip= target_port= target_real= file= proxy= ssh_conf_file=

    if [ $# -ne 1 -a $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target_real=$( TARGET_REAL "$1" )
    if [ -z "${target_real}" ]; then
      ERROR "Target host '${target}' doesn't exist"
    fi

    [ $# -eq 2 ] && file="$2"
    [ -z "${file}"   ] && file="$(SSHGATE_ACCOUNT_HOMEDIR)/.ssh/known_hosts"
    [ ! -f "${file}" ] && touch "${file}"

    target_ip=$( private_TARGET_GET_IP "${target_real}" )
    target_port=$( private_TARGET_SSH_GET_CONFIG_FILE "${target_real}" $(GET_LOGIN "${target}") \
                   | grep 'Port' | sed -e 's/^[^0-9]*\([0-9]*\)[^0-9]*$/\1/' )
    target_port="${target_port:-22}"

    [ -n "${target_real}" ] && proxy=$( TARGET_GET_CONF "${target_real}" SSH_PROXY )

    if [ -z "${proxy}" ]; then
      ssh-keyscan -p "${target_port}" -t dsa,rsa    "${target_real},${target_ip}"    >> "${file}" 2>/dev/null
      [ $? -ne 0 ] && return 1
    else
      TARGET_SSH_RUN_COMMAND "${proxy}" \
          "ssh-keyscan -p ${target_port} -t dsa,rsa '${target_real},${target_ip}' 2>/dev/null" >> "${file}"
      [ $? -ne 0 ] && return 1
    fi

    chown "${SSHGATE_GATE_ACCOUNT}" "${file}"
    return 0;
  }

  # usage: private_DELETE_TARGET_FROM_KNOWN_HOST <target> [ <file> ]
  # desc: delete the public host sshkey of the <target> from the known_hosts file
  # note: if <file> is not specified, determine it with SSHGATE_ACCOUNT_HOMEDIR
  private_DELETE_TARGET_FROM_KNOWN_HOST() {
    local target= file= tmp_file=
    if [ $# -eq 0 -o $# -gt 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( GET_HOST "$1" )
    [ $# -eq 2 ] && file="$2"
    [ -z "${file}" ] && file="$(SSHGATE_ACCOUNT_HOMEDIR)/.ssh/known_hosts"
    tmp_file="/tmp/file.$( RANDOM )"

    [ -e "${file}"     ] && grep -v "^${target}"      < "${file}"     > "${tmp_file}"
    [ -e "${tmp_file}" ] && mv "${tmp_file}" "${file}"
    [ -e "${file}"     ] && chown "${SSHGATE_GATE_ACCOUNT}" "${file}"

  }

fi # if [ "${__MISC_FUNC__:-}" != 'Loaded' ]; then
