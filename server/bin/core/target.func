#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of all targets related functions
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__}" != 'Loaded' ]; then
  echo "ERROR: Only sshgate.core can load user.func."; exit 1;
fi

if [ "${__TARGET_FUNC__:-}" != 'Loaded' ]; then
  __TARGET_FUNC__='Loaded'

  # usage: TARGETS_LIST
  # desc: list all targets, whose name match <pattern> if given
  TARGETS_LIST () {
    local res= find_opt=
    [ $# -eq 1 ] && find_opt="-iname '$1'"

    res=$( eval "find '${SSHGATE_DIR_TARGETS}' -mindepth 1 -type d ${find_opt} -printf '%P\n'" )
    echo "${res}" | sort -u
    return 0;
  }

  # usage: TARGET_ADD [<login>@]<target_host> [ [<login>@]<proxy> ]
  # desc: add a target host
  # note: it will add the ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN} login to target
  # note: it will try to install public sshket to the target authorized_keys2
  # note: if no <login> is given, use ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}
  # important: need to be root to be able to chown ssh priv key
  TARGET_ADD () {
    local target= privsshkey= tmp_file= proxy= proxy_login= reply=
    if [ $# -lt 1 -a $# -gt 3 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( GET_HOST "$1" )
    login=$( GET_LOGIN "$1" )
    if [ -z "${target}" ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    if [    -d "${SSHGATE_DIR_TARGETS}/${target}" \
         -o -L "${SSHGATE_DIR_TARGETS}/${target}" ]; then
      ERROR "Target or Alias '${target}' already exist"; return 1;
    fi

    if [ $# -eq 2 ]; then
      proxy=$( GET_HOST "$2" )
      proxy_login=$( GET_LOGIN "$2" )
      proxy=$( TARGET_REAL "${proxy}" )
      if [ -z "${proxy}" ]; then
        ERROR "Proxy target host '${proxy}' doesn't exist"; return 1;
      fi
    fi


    # check that the host exists (DNS/IP)
    if [ -z "${proxy}" ]; then
      ping -c 1 "${target}" >/dev/null 2>/dev/null
    else
      TARGET_SSH_RUN_COMMAND "${login}@${proxy}" "ping -c 1 '${target}' >/dev/null 2>/dev/null"
    fi
    if [ $? -ne 0 ]; then
      echo "Warning: Unable to ping ${target} !";
      ASK --yesno reply 'Continue [Y] ? '
      if [ "${var}" = 'N' ]; then
        ERROR "Adding '${target}' stoped"; return 1;
      fi
    fi

    # create the target now
    mkdir -p "${SSHGATE_DIR_TARGETS}/${target}" 2>/dev/null
    if [ $? -ne 0 ]; then
      ERROR "Can't create target data"; return 1;
    fi

    target_add_rollback () {
      ERROR "Can't create target '${target}'";
      TARGET_DEL "${target}"
    }

    if [ -n "${proxy}" ]; then
      TARGET_SET_CONF "${target}" SSH_PROXY "${proxy_login}@${proxy}"
      if [ $? -ne 0 ]; then
        target_add_rollback; return 1;
      fi
    fi

    TARGET_SSHKEY_EDIT "${target}"
    if [ $? -ne 0 ]; then
      target_add_rollback; return 1;
    fi

    TARGET_SSH_ADD_LOGIN "${target}" "${login}"
    if [ $? -ne 0 ]; then
      target_add_rollback; return 1;
    fi

    private_TARGET_KNOWN_HOSTS_ADD "${target}"
    if [ $? -ne 0 ]; then
      echo "NOTICE: Can't add identity of host in know_hosts file. Use 'target ${target}' to add it manually"
      echo "NOTICE: Public ssh key of '${target}' can't be installed on '${login}@${target}'. Install it manually"
    else
      TARGET_SSHKEY_INSTALL "${target}" "${login}"
    fi

    private_MAIL_APPEND "Target ${login}@${target} added"

    chown -R "${SSHGATE_GATE_ACCOUNT}" "${SSHGATE_DIR_TARGETS}/${target}"

    return 0;
  }

  # usage: TARGET_DEL <target_host>
  # desc: Delete a target host
  TARGET_DEL () {
    local target=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( TARGET_REAL "$1" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist"; return 1
    fi

    private_TARGET_KNOWN_HOSTS_DEL "${target}"

    for alias in $( TARGET_LIST_ALIASES "${target}" ); do
      rm -f "${SSHGATE_DIR_TARGETS}/${alias}"
    done

    rm -rf "${SSHGATE_DIR_TARGETS}/${target}"

    private_MAIL_APPEND "Target ${target} removed"

    return 0;
  }

  # usage: TARGET_RENAME <target_host> <new_name>
  # desc: Rename a target host and create an alias with the old target name
  TARGET_RENAME () {
    local target= target_port= new_name= new_target=
    if [ $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi
    target=$( TARGET_REAL "$1" ); new_name="$2"; new_target=$( TARGET_REAL "${new_name}" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist"; return 1;
    fi
    if [ "${target}" != "$1" ]; then
      ERROR "Target name '$1' is an alias of '${target}'"; return 1;
    fi
    if [ -n "${new_target}" ]; then
      ERROR "Target name '${new_name}' already used"; return 1;
    fi

    mv "${SSHGATE_DIR_TARGETS}/${target}" "${SSHGATE_DIR_TARGETS}/${new_name}"
    if [ -d "${SSHGATE_DIR_LOGS_TARGETS}/${target}/" ]; then
      mv "${SSHGATE_DIR_LOGS_TARGETS}/${target}" "${SSHGATE_DIR_LOGS_TARGETS}/${new_name}"
    fi
    echo "Target renamed : ${target} -> ${new_name}"

    TARGET_ADD_ALIAS "${new_name}" "${target}"
    echo "Target alias '${target}' created"

    private_TARGET_KNOWN_HOSTS_ADD "${new_name}"
    private_MAIL_APPEND "Target ${target} renamed to ${new_name}"

    return 0;
  }

  # usage: TARGET_DISPLAY_CONF <target>
  # desc: Display the configuration file of the target
  TARGET_DISPLAY_CONF () {
    local target= file=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target=$( TARGET_REAL "$1" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi

    file="${SSHGATE_DIR_TARGETS}/${target}/properties"
    if [ ! -f "${file}" ]; then
      NOTICE "Target host '${target}' has no configuration file"
    else
      cat "${file}"
    fi
    return 0
  }

  # usage: TARGET_SET_CONF <target> <variable> [ <value> ]
  # desc: Set a variable/value pair into the target configuration file
  # note: if no <value> is given, the <variable> is removed from the
  #       configuration file of the <target>
  TARGET_SET_CONF () {
    local target= var= value= file=
    if [ $# -lt 2 -o $# -gt 3 ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target="$1"; var="$2"
    [ $# -eq 3 ] && value="$3"

    if [ -z "${target}" -o -z "${var}" ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi

    file="${SSHGATE_DIR_TARGETS}/${target}/properties"
    if [ -n "${value}" ]; then
      [ ! -f "${file}" ] && touch "${file}"
      CONF_SAVE --conf-file "${file}" "${var}" "${value}"
      private_MAIL_APPEND "Target '${target}' configuration: ${var} = ${value}"
    else
      CONF_DEL --conf-file "${file}" "${var}"
      private_MAIL_APPEND "Target '${target}' configuration: ${var} removed"
    fi

    [ -f "${file}" ] && chmod a+r "${file}" # ensure file permissions
    return 0;
  }

  TARGET_DEL_CONF () {
    local target= var= file=
    if [ $# -ne 2 ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target="$1"; var="$2"
    if [ -z "${target}" -o -z "${var}" ]; then
      BAD_ARGUMENTS; return 1;
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi

    file="${SSHGATE_DIR_TARGETS}/${target}/properties"
    CONF_DEL --conf-file "${file}" "${var}"
    [ -f "${file}" ] && chmod a+r "${file}" # ensure file permissions

    private_MAIL_APPEND "Target '${target}' configuration: ${var} removed"
    return 0;
  }

  # usage: TARGET_GET_CONF <target> <variable>
  # desc: Get the <variable> value from the target configuration file
  TARGET_GET_CONF () {
    local target= var= file=
    if [ $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target="$1"; var="$2"
    target=$( GET_HOST "${target}" )
    target=$( TARGET_REAL "${target}" )

    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1;
    fi
    if [ -z "${var}" ]; then
      BAD_ARGUMENTS; return 1;
    fi

    file="${SSHGATE_DIR_TARGETS}/${target}/properties"
    if [ -f "${file}" ]; then
      CONF_GET --conf-file "${file}" "${var}"
      eval "echo \"\${${var}}\""
    fi
    return 0;
  }

  # usage: TARGET_LIST_ALIASES [ <target_host> ]
  # desc: List aliases of a target host, or all aliases
  # note: if called without argument, list aliases of all hosts
  TARGET_LIST_ALIASES () {
    local target= t=
    if [ $# -eq 1 ]; then
      target=$( TARGET_REAL "$1" )
      if [ -z "${target}" ]; then
        ERROR "Target host '${target}' doesn't exist" ; return 1;
      fi
    fi

    for file in $( find "${SSHGATE_DIR_TARGETS}/" -type l ); do
      t=$( readlink -f "${file}" )
      [ -z "${target}" -o "${t##*/}" = "${target}" ] && echo "${file##*/}"
    done | sort -u
    return 0;
  }

  # usage: TARGET_ADD_ALIAS <target_host> <alias>
  # desc: Add an alias name to the target host
  TARGET_ADD_ALIAS () {
    local target=
    if [ $# -ne 2 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( TARGET_REAL "$1" ); alias="$2"
    if [ -z "${target}" ]; then
      ERROR "Target host '${target}' doesn't exist" ; return 1
    fi
    if [ -z "${alias}" ]; then
      BAD_ARGUMENTS ; return 1;
    fi
    if [ -L "${SSHGATE_DIR_TARGETS}/${alias}" ]; then
      ERROR "Target alias '${alias}' already exists" ; return 1
    fi
    if [ -d "${SSHGATE_DIR_TARGETS}/${alias}" ]; then
      ERROR "Target alias '${alias}' correspond to a target host name" ; return 1
    fi

    ln -s "${SSHGATE_DIR_TARGETS}/${target}" "${SSHGATE_DIR_TARGETS}/${alias}"
    return 0;
  }

  # usage: TARGET_DEL_ALIAS <alias>
  # desc: Delete an alias name of a target host
  TARGET_DEL_ALIAS () {
    local alias=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    alias="$1"
    if [ -z "${alias}" ]; then
      BAD_ARGUMENTS ; return 1;
    fi
    if [ ! -L "${SSHGATE_DIR_TARGETS}/${alias}" ]; then
      ERROR "Target alias '${alias}' doesn't exist" ; return 1;
    fi

    rm -f "${SSHGATE_DIR_TARGETS}/${alias}"
    return 0;
  }

  # usage: TARGET_REAL <target_host>
  # desc: Get the real name of a target host
  # note: if real name is an empty string, the target host doesn't exist
  TARGET_REAL () {
    local target=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( GET_HOST "$1" )
    if [ -z "${target}" ]; then
      echo ''; return 1;
    fi

    if [ -L "${SSHGATE_DIR_TARGETS}/${target}" ]; then
      target=$( readlink -f "${SSHGATE_DIR_TARGETS}/${target}" )
      echo "${target##*/}"
    else
      if [ -d "${SSHGATE_DIR_TARGETS}/${target}" ]; then
        echo "${target}"
      else
        echo ''
        return 1;
      fi
    fi
    return 0;
  }

fi # if [ "${__TARGET_FUNC__}" != 'Loaded' ]; then
