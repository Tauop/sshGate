#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of all targets sessions/logs related functions
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__}" != 'Loaded' ]; then
  echo "ERROR: Only sshgate.core can load user.func."; exit 1;
fi

if [ "${__RECORD_FUNC__:-}" != 'Loaded' ]; then
  __RECORD_FUNC__='Loaded'

  # usage: private_TARGET_SESSION_GET_LOG_FILE <target_host>
  # desc: echo-return the target global log file
  # note: create the target main directory in ${SSHGATGE_DIR_LOG} if needed
  # note: as it's a private methods, we don't print any error
  private_SESSION_TARGET_GET_LOG_FILE () {
    local target= item=
    if [ $# -ne 1 ]; then
      echo ''; return 1;
    fi

    target=$( TARGET_REAL "$1" )
    if [ -z "${target}" ]; then
      echo ''; return 1;
    fi

    item="${SSHGATE_DIR_LOGS_TARGETS}/${target}"
    if [ ! -d "${item}/" ]; then
      mkdir -p "${item}/"
      chown -R "${SSHGATE_GATE_ACCOUNT}" "${item}/"
    fi

    item="${item}/global.log"
    touch "${item}"
    chown "${SSHGATE_GATE_ACCOUNT}" "${item}"
    chmod a=r,u+w "${item}"

    echo "${item}"
    return 0;
  }

  # usage: USER_SESSION_GET_LOG_FILE <user>
  # desc: echo-return the user log file
  # note: create the log file if needed
  # note: as it's a private method, we don't print any error
  private_SESSION_USER_GET_LOG_FILE () {
    local user= item=

    if [ $# -ne 1 ]; then
      echo ''; return 1;
    fi

    user="${1:-}"
    if [ -z "${user}" -o ! -f "${SSHGATE_DIR_USERS}/${user}" ]; then
      echo ''; return 1;
    fi

    item="${SSHGATE_DIR_LOGS_USERS}/${user}.log"
    touch "${item}"
    chown "${SSHGATE_GATE_ACCOUNT}" "${item}"
    chmod a=r,u+w "${item}"
    echo "${item}"
    return 0;
  }

  # --------------------------------------------------------------------------

  # usage: private_SESSION_STATE_CLEAN
  # desc: clean current_session.log file, by removing no-existing process (pid)
  private_SESSION_STATE_CLEAN () {
    local session_file= pid= rest= tmp_file= old_IFS=

    session_file="${SSHGATE_LOGS_CURRENT_SESSION_FILE}"
    tmp_file="/tmp/file.$(RANDOM)"

    [ ! -w "${session_file}" ] && return 1

    MUTEX_GET "${session_file}"
      cp "${session_file}" "${tmp_file}"
      old_IFS="${IFS}"
      IFS=':'; while read pid rest ; do
        ps -p "${pid}" >/dev/null 2>/dev/null && printf "%s:%s\n" "${pid}" "${rest}"
      done < "${tmp_file}" > "${session_file}"
      IFS="${old_IFS}"
    MUTEX_RELEASE "${session_file}"

    rm -f "${tmp_file}"

    return 0
  }

  # usage: private_SESSION_CURRENT_ADD <timestamp> <pid> <username> <target> <type> <info>
  # desc: add session state information
  private_SESSION_STATE_ADD () {
    local log_msg= session_file=

    session_file="${SSHGATE_LOGS_CURRENT_SESSION_FILE}"
    # format = <pid>:<timestamp>:<username>:<target>:<type>:<...info ..>
    log_msg="${2:-}:${1:-}:${3:-}:${4:-}:${5:-}"
    shift 5
    log_msg="${log_msg}:$*"

    private_SESSION_STATE_CLEAN

    MUTEX_GET "${session_file}"
    echo "${log_msg}" >> "${session_file}"
    MUTEX_RELEASE "${session_file}"

    return 0;
  }

  # usage: private_SESSION_STATE_REMOVE <pid>
  # desc: remove session state information
  private_SESSION_STATE_REMOVE () {
    local session_file= nb=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    session_file="${SSHGATE_LOGS_CURRENT_SESSION_FILE}"

    private_SESSION_STATE_CLEAN

    MUTEX_GET "${session_file}"
      if [ -w "${session_file}" ]; then
        grep -v "^$1:" < "${session_file}" > "${session_file}.tmp"
        mv "${session_file}.tmp" "${session_file}"
        nb=$( wc -l < "${session_file}" | cut -d' ' -f1 )
        [ "${nb}" = '0' ] && rm -f "${session_file}"
      fi
    MUTEX_RELEASE "${session_file}"

    return 0;
  }

  # --------------------------------------------------------------------------

  # usage: private_SESSION_WRITE_EVENT <start-or-end> <timestamp> <pid> <username> <target> <information>
  # desc: write an event into target logs and user logs
  private_SESSION_WRITE_EVENT () {
    local log_msg= log_file= target= user=

    user="${4:-}"; target="${5:-}"
    log_msg="${2:-}:${1:-}:${3:-}:${4:-}:${5:-}"
    shift 5;
    log_msg="${log_msg}:$*"

    # in target global session file
    log_file=$( private_SESSION_TARGET_GET_LOG_FILE "${target}" )
    if [ -n "${log_file}" ]; then
      MUTEX_GET "${log_file}"
      echo "${log_msg}" >> "${log_file}"
      MUTEX_RELEASE "${log_file}"
    fi

    # in user global session file
    log_file=$( private_SESSION_USER_GET_LOG_FILE "${user}" )
    if [ -n "${log_file}" ]; then
      MUTEX_GET "${log_file}"
      echo "${log_msg}" >> "${log_file}"
      MUTEX_RELEASE "${log_file}"
    fi

    # in global session log file
    log_file="${SSHGATE_GLOBAL_SESSION_LOG_FILE}"
    if [ -n "${log_file}" ]; then
      MUTEX_GET "${log_file}"
      # <start|end>:<pid>:<username>:<target>:<information>
      echo "${log_msg}" >> "${log_file}"
      MUTEX_RELEASE "${log_file}"
    fi

    return 0;
  }

  # usage: SESSION_START <timestamp> <pid> <username> <target> [ <type> ..<information>.. ]
  # desc: Log the connection start event into target logs and user logs
  # note: <type> can be 'ssh' or 'scp', or whatever you want
  SESSION_START () {
    private_SESSION_WRITE_EVENT 'START' $@ ;
    private_SESSION_STATE_ADD $@
  }

  # usage: TARGET_SESSION_END <timestamp> <pid> <username> <target> <session-log-file>
  # desc: Log the connection end event into target global file
  SESSION_END () {
    private_SESSION_WRITE_EVENT 'END' $@ ;
    private_SESSION_STATE_REMOVE "${2:-}"
  }

  # --------------------------------------------------------------------------

  # usage: SESSION_GET_TARGET_RECORD_FILE <timestamp> <username> <target>
  # desc: echo-return a random-generated target session log file path
  # note: we don't create/touch the file
  SESSION_TARGET_GET_RECORD_FILE () {
    local timestamp= user= target= f=
    if [ $# -ne 3 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    timestamp="$1"; user="$2"; target="$3"
    target=$( TARGET_REAL "${target}" )
    if [ -z "${target}" -o -z "${user}" ]; then
      echo ''; return 1;
    fi

    f="${SSHGATE_DIR_LOGS_TARGETS}/${target}/${timestamp}.${user}.$$"
    echo "$f"
    return 0;
  }

  # --------------------------------------------------------------------------

  # usage: SESSION_DISPLAY_CONNECTED
  # desc: echo-return the list of connected sessions
  SESSION_DISPLAY_CONNECTED () {
    local session_file= pid= time= user= target= old_IFS=

    session_file="${SSHGATE_LOGS_CURRENT_SESSION_FILE}"

    if [ -f "${session_file}" ]; then
      private_SESSION_STATE_CLEAN

      MUTEX_GET "${session_file}"
        old_IFS="${IFS}"
        IFS=':'; while read pid time user target type info; do
          printf "[%5s] %s --(%s)--> %s (%s%s)\n" "${pid}" "${user}" "${type}" "${target}" "$( date -d "1970-01-01 UTC ${time} seconds" +'%Y-%m-%d %T %z' )" "${info:+ - ${info}}"
        done < "${session_file}"
        IFS="${old_IFS}"
      MUTEX_RELEASE "${session_file}"
    else
      echo "No user connected"
    fi
  }

  # usage: SESSION_TARGET_LIST <target>
  # desc: Display all sessions logs of the <target>
  SESSION_TARGET_LIST () {
    local target=

    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    target=$( TARGET_REAL "$1" )
    if [ -z "${target}" ]; then
      ERROR "Target '$1' doesn't exist"; return 1;
    fi

    ls -1 "${SSHGATE_DIR_LOGS_TARGETS}/${target}"

    return 0;
  }

  # usage: SESSION_LIST_LAST <number>
  # desc: Display number-last closed session
  SESSION_LIST_LAST () {
    local nb=

    if [ $# -ne 0 -a $# -ne 1 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    [ $# -eq 1 ] && nb=$?
    if ! test ${nb} -eq ${nb} 2>/dev/null ; then
      ERROR "First argument must be a number"; return 1;
    fi

    echo 'Not Yet implemented :-('
    return 0
  }

  # usage: SESSION_KILL <pid>
  # desc: Kill a sshGate session
  SESSION_KILL () {
    local pid= session_file= tmp=
    if [ $# -ne 1 ]; then
      BAD_ARGUMENTS; return 1;
    fi

    pid="$1"
    session_file="${SSHGATE_LOGS_CURRENT_SESSION_FILE}"

    if [ -w "${session_file}" ]; then
      grep "^${pid}:" < "${session_file}" >/dev/null 2>/dev/null
      if [ $? -eq 0 ]; then
        # get the process tty/pts
        tmp=$( ps -p "${pid}" -o tty )
        if [ $? -ne 0 ]; then
          ERROR "No such process ${pid}."
          return 1
        fi
        # in worst case, it will kill the ssh process which launch sshgate-bridge
        kill -HUP $( ps -t `echo "${tmp}" | tail -n 1` -o pid | sort -n | tail -n 1 ) >/dev/null 2>/dev/null
        [ $? -ne 0 ]                                       \
          && ERROR "Can't kill or no such session ${pid}." \
          || MESSAGE "Session ${pid} killed."
        private_SESSION_STATE_REMOVE "${pid}"
      fi
    else
      ERROR "No active session"
    fi

    return 0
  }

fi # end of: if [ "${__RECORD_FUNC__:-}" != 'Loaded' ]; then
