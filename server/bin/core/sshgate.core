#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# README ---------------------------------------------------------------------
#
# Collection of all need functions to deal with sshgate administrations.
#
# ----------------------------------------------------------------------------

if [ "${__SSHGATE_CORE__:-}" != 'Loaded' ]; then
  __SSHGATE_CORE__='Loaded'

  load() {
    local var= value= file=

    var="$1"; file="$2"
    value=$( eval "echo \"\${${var}:-}\"" )

    [ -n "${value}" ] && return 1;
    if [ -f "${file}" ]; then
      . "${file}"
    else
      echo "ERROR: Unable to load ${file}"
      exit 2
    fi
    return 0;
  }
  load SSHGATE_DIRECTORY '/etc/sshgate.conf'

  load __SSHGATE_SETUP__ "${SSHGATE_DIRECTORY}/data/sshgate.setup"
  load __LIB_RANDOM__    "${SCRIPT_HELPER_DIRECTORY}/random.lib.sh"
  load __LIB_MESSAGE__   "${SCRIPT_HELPER_DIRECTORY}/message.lib.sh"
  load __LIB_CONF__      "${SCRIPT_HELPER_DIRECTORY}/conf.lib.sh"
  load __LIB_ASK__       "${SCRIPT_HELPER_DIRECTORY}/ask.lib.sh"

  # load sub-core libraries
  load __USER_FUNC__      "${SSHGATE_DIR_CORE}/user.func"
  load __TARGET_FUNC__    "${SSHGATE_DIR_CORE}/target.func"
  load __USERGROUP_FUNC__ "${SSHGATE_DIR_CORE}/usergroup.func"
  load __MISC_FUNC__      "${SSHGATE_DIR_CORE}/misc.func"

  ERROR () { echo "ERROR: $*" 1>&2; }
  BAD_ARGUMENTS () { ERROR "Bad arguments"; }

  # usage: private_ACL_FILE_ADD <line> <file>
  private_ACL_FILE_ADD () {
    [ ! -f "$2" ] && touch "$2" # to avoid bugs
    grep "^$1\$" < "$2" >/dev/null 2>/dev/null
    [ $? -ne 0 ] && echo "$1" >> "$2"
  }

  # usage: private_ACL_FILE_DEL <line> <file>
  private_ACL_FILE_DEL () {
    local random=$( RANDOM )
    [ ! -f "$2" ] && return 0; # to avoir bugs
    grep -v "^$1\$" < "$2" > "/tmp/file.${random}"
    mv "/tmp/file.${random}" "$2"
  }

  # usage: private_MAIL_APPEND <message>
  private_MAIL_APPEND () {
    [ "${__LIB_MAIL__:-}" = 'Loaded' -a "${SSHGATE_MAIL_SEND:-}" = 'true' ] && MAIL_APPEND "$*"
  }

  SSHGATE_GET_HELP() {
    local type="$1" cli_command="$2" func= help= help_menu= sed_code=
    if [ "${type}" = 'command' ]; then
      help="$4"
      if [ -z "${help}" ]; then
        func="${3%% *}"
        sed_code="${sed_code} /usage: ${func} / {  :next n; s/^ *# *desc: *\(.*\) *$/\1/p; t; b next; };"
        sed_code="${sed_code} /usage: ${func}\$/ { :next n; s/^ *# *desc: *\(.*\) *$/\1/p; t; b next; };"
        help=$( find "${SSHGATE_DIR_CORE}/" -type f -exec cat {} \; | sed -n -e "${sed_code}" )
      fi
      printf "%s\t%s\t%s" "${type}" "${cli_command}" "${help}"
    else
      help="$3"
      if [ -n "${help}" ]; then
        cli_command=$( private_PURIFY_CLI_COMMAND "${cli_command}" )
        help_menu=$( echo "${cli_command}" | sed -e 's/?//g;s/  */ /g;' )
        printf "%s\t%s\t%s\t%s" "${type}" "${help_menu}" "${cli_command}" "${help}"
      fi
    fi

    return 0;
  }

  SSHGATE_DISPLAY_HELP() {
    local line= cmd= help=
    grep $'^menu\t' < "${__CLI_HELP_FILE__}"  \
      | cut -d $'\t' -f 2,4 | tr $'\t' ':'    \
      | while read line ; do
          cmd="${line%:*}"
          help="${line#${cmd}:}"
          printf " %-20s\t-- %s\n" "${cmd}" "${help}"
        done | sort -u
    return 0
  }

  SSHGATE_DISPLAY_HELP_FOR() {
    local cli_cmd= line= cmd= help=

    cli_cmd=$( grep $'^menu\t' < "${__CLI_HELP_FILE__}" \
      | cut -d $'\t' -f 2,3 | tr $'\t' ':'              \
      | grep "^$*:" | head -n 1 | cut -d ':' -f2 )
    cli_cmd=$( echo "${cli_cmd}[: ]" | sed -e 's/?/[^ ]*/g')

    grep $'^command' < "${__CLI_HELP_FILE__}" \
      | cut -d $'\t' -f 2- | tr $'\t' ':'     \
      | grep "^${cli_cmd}"                    \
      | while read line ; do
          [ -z "${line}" ] && continue;
          cmd="${line%:*}"
          help="${line#"${cmd}":}"
          printf " %-20s\t-- %s\n" "${cmd}" "${help}"
        done
    return 0
  }

  # usage: SSHGATE_ACCOUNT_HOMEDIR
  # desc: Echo-return the home directory of the SSHGATE_GATE_ACCOUNT user
  SSHGATE_ACCOUNT_HOMEDIR() {
    cat /etc/passwd | grep "^${SSHGATE_GATE_ACCOUNT}:" | cut -d':' -f6
  }

  # usage: GET_LOGIN <string>
  # desc: Echo-return the login from a connection string
  # note: if the string doesn't contain the login :
  #       - we try to get the DEFAULT_SSH_LOGIN of the host
  #       - otherwise ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}, if contain in login list of the host
  #       - otherwise the first login avariable for the host
  #       - empty string ( ERROR )
  GET_LOGIN () {
    local string="$1" login= target= login_list=

    # the login is present in the connection string
    if [ "${string}" != "${string%%@*}" ]; then
      echo "${string%%@*}";
      return 0;
    fi

    target=$( TARGET_REAL "${string}" )
    if [ -n "${target}" ]; then
      login=$( TARGET_GET_CONF "${target}" DEFAULT_SSH_LOGIN )
      if [ -z "${login}" ]; then
        login=$( TARGET_SSH_LIST_LOGINS "${target}" | grep "${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}" )
      fi
    fi
    [ -n "${login}" ] && echo "${login}" || echo "${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}"

    return 0;
  }

  # usage: GET_HOST <string>
  # desc: Echo-return the host from a connection string
  GET_HOST () { echo "${1#*@}"; return 0; }

  # usage: HAS_ACCESS <username> [<login>@]<target_host>
  # usage: HAS_ACCESS <username> <target_host> <login>
  # desc: Tell if a user has access to a taret host
  # note: Echo-return 'true' if the user is allowed to access to the target host, 'false' otherwise
  # note: if no <login> is given, use ${SSHGATE_TARGETS_DEFAULT_SSH_LOGIN}
  HAS_ACCESS() {
    local user= target= login= is_admin= is_restricted=

    if [ $# -ne 2 -a $# -ne 3 ]; then
      BAD_ARGUMENTS ; return 1;
    fi

    if [ $# -eq 2 ]; then
      user="$1"
      target=$( GET_HOST "$2" )
      login=$( GET_LOGIN "$2" )
    else
      user="$1"; target="$2"; login="$3"
    fi

    target=$( TARGET_REAL "${target}" )
    if [ -z "${user}" -o -z "${target}" ]; then
      echo 'false'; return 1;
    fi

    is_admin=$( USER_GET_CONF "${user}" IS_ADMIN )
    is_restricted=$( USER_GET_CONF "${user}" IS_RESTRICTED )

    if [ "${is_admin}"  = 'true' -o "${is_restricted}" = 'false' ]; then
      TARGET_SSH_LIST_LOGINS "${target}" | grep "^${login}$" >/dev/null
      if [ $? -eq 0 ]; then
        echo 'true'; return 0;
      else
        echo 'false'; return 1;
      fi
    fi

    TARGET_ACCESS_LIST_USERS "${target}" "${login}" | grep "^${user}$" >/dev/null
    if [ $? -eq 0 ]; then
      echo 'true'; return 0;
    fi
    echo 'false'; return 1;
  }

fi # __SSHGATE_CORE__
