#!/bin/bash
#
# Copyright (c) 2010 Linagora
# Patrick Guiran <pguiran@linagora.com>
# http://github.com/Tauop/sshGate
#
# sshGate is free software, you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# sshGate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

load() {
  local var= value= file=

  var="$1"; file="$2"
  value=$( eval "echo \"\${${var}:-}\"" )

  [ -n "${value}" ] && return 1;
  if [ -f "${file}" ]; then
    . "${file}"
  else
    echo "ERROR: Unable to load ${file}"
    exit 2
  fi
  return 0;
}

load SSHGATE_DIRECTORY       '/etc/sshgate.conf'

load __SSHGATE_SETUP__ "${SSHGATE_DIRECTORY}/data/sshgate.setup"
load __SSHGATE_CORE__  "${SSHGATE_DIR_CORE}/sshgate.core"

# help is only needed for the CLI
load __HELP_FUNC__     "${SSHGATE_DIR_CORE}/help.func"

load __LIB_ASK__       "${SCRIPT_HELPER_DIRECTORY}/ask.lib.sh"
load __LIB_MAIL__      "${SCRIPT_HELPER_DIRECTORY}/mail.lib.sh"
load __LIB_CLI__       "${SCRIPT_HELPER_DIRECTORY}/cli.lib.sh"


if [ "${SSHGATE_TEST:-}" != 'sshGateTest' ]; then
  # during test, don't check for user
  SSHKEY_USER=
  while true ; do
    [ $# -eq 0 ] && break;
    case $1 in
      -u ) shift; SSHKEY_USER="$1"; shift ;;
      *  ) shift ;; # ignore
    esac
  done

  if [ -z "${SSHKEY_USER}" ]; then
    echo "ERROR: you have to specify a username to use sshgate CLI"
    echo "usage: $0 -u <username>"
    exit 1
  fi
fi # end of: if [ "${SSHGATE_TEST:-}" != 'sshGateTest' ]; then

# don't want to add exec.lib.sh in dependencies :/
user_id=`id -u`
[ "${user_id}" != "0" ] \
  && KO "You must execute $0 with root privileges"

CLI_REGISTER_HELP '/tmp/sshgate-cli-help.txt' \
                  SSHGATE_GET_HELP            \
                  SSHGATE_DISPLAY_HELP        \
                  SSHGATE_DISPLAY_HELP_FOR

CLI_REGISTER_MENU    'user'                           'User related commands'
CLI_REGISTER_COMMAND 'user list'                      'USERS_LIST'
CLI_REGISTER_COMMAND 'user list <pattern>'            'USERS_LIST \1'
CLI_REGISTER_COMMAND 'user add <user> mail <email>'   'USER_ADD \1 \2'
CLI_REGISTER_COMMAND 'user del <user>'                'USER_DEL \1'
CLI_REGISTER_COMMAND 'user build auth_keys'           'USERS_AUTH_KEYS_BUILD'

CLI_REGISTER_MENU    'user <user>'
CLI_REGISTER_COMMAND 'user <user> display conf'                     'USER_DISPLAY_CONF \1'
CLI_REGISTER_COMMAND 'user <user> set conf <variable> <value>'      'USER_SET_CONF \1 \2 \3'
CLI_REGISTER_COMMAND 'user <user> del conf <variable>'              'USER_SET_CONF \1 \2'
CLI_REGISTER_COMMAND 'user <user> list targets'                     'USER_LIST_TARGETS \1'
CLI_REGISTER_COMMAND 'user <user> list usergroups'                  'USER_LIST_USERGROUPS \1'
CLI_REGISTER_COMMAND 'user <user> has access [<login>@]<target>'    'HAS_ACCESS \1 \2'
CLI_REGISTER_COMMAND 'user <user> access info'                      'USER_ACCESS_INFO \1'
CLI_REGISTER_COMMAND 'user <user> access notify'                    'USER_ACCESS_NOTIFY \1'
CLI_REGISTER_COMMAND 'user <user> edit sshkey'                      'USER_SSHKEY_EDIT \1'
CLI_REGISTER_COMMAND 'user <user> display sshkey'                   'USER_SSHKEY_DISPLAY \1'
CLI_REGISTER_COMMAND 'user <user> update auth_keys'                 'USER_AUTH_KEYS_UPDATE \1'

CLI_REGISTER_MENU    'usergroup'             'Usergroup related commands'
CLI_REGISTER_COMMAND 'usergroup list'        'USERGROUPS_LIST'
CLI_REGISTER_COMMAND 'usergroup add <group>' 'USERGROUP_ADD \1'
CLI_REGISTER_COMMAND 'usergroup del <group>' 'USERGROUP_DEL \1'

CLI_REGISTER_MENU    'usergroup <group>'
CLI_REGISTER_COMMAND 'usergroup <group> list users'        'USERGROUP_LIST_USERS \1'
CLI_REGISTER_COMMAND 'usergroup <group> add user <user>'   'USERGROUP_ADD_USER \1 \2'
CLI_REGISTER_COMMAND 'usergroup <group> del user <user>'   'USERGROUP_DEL_USER \1 \2'
CLI_REGISTER_COMMAND 'usergroup <group> list targets'      'USERGROUP_LIST_TARGETS \1'
CLI_REGISTER_COMMAND 'usergroup <group> access info'       'USERGROUP_ACCESS_INFO \1'
CLI_REGISTER_COMMAND 'usergroup <group> access notify'     'USERGROUP_ACCESS_NOTIFY \1'

CLI_REGISTER_MENU    'target'                                                      'Target related commands'
CLI_REGISTER_COMMAND 'target list'                                                 'TARGETS_LIST'
CLI_REGISTER_COMMAND 'target list <pattern>'                                       'TARGETS_LIST \1'
CLI_REGISTER_COMMAND 'target add [<login>@]<target>'                               'TARGET_ADD \1'
CLI_REGISTER_COMMAND 'target add [<login>@]<target> with proxy [<login>@]<target>' 'TARGET_ADD \1 \2'
CLI_REGISTER_COMMAND 'target add [<login>@]<target> via [<login>@]<target>'        'TARGET_ADD \1 \2'
CLI_REGISTER_COMMAND 'target del <target>'                                         'TARGET_DEL \1'
CLI_REGISTER_COMMAND 'target alias list'                                           'TARGET_LIST_ALIASES'
CLI_REGISTER_COMMAND 'target alias list <pattern>'                                 'TARGET_LIST_ALIASES \1'

CLI_REGISTER_MENU    'target ssh'                      "Targets ssh related commands"
CLI_REGISTER_COMMAND 'target ssh test all'             'TARGET_SSH_TEST_ALL'
CLI_REGISTER_COMMAND 'target ssh install all key'      'TARGET_SSHKEY_INSTALL_ALL'
CLI_REGISTER_COMMAND 'target ssh edit config'          'TARGET_SSH_EDIT_CONFIG all'
CLI_REGISTER_COMMAND 'target ssh display config'       'TARGET_SSH_DISPLAY_GLOBAL_CONFIG'
CLI_REGISTER_COMMAND 'target ssh update known_hosts'   'TARGET_SSH_UPDATE_KNOWN_HOSTS'

CLI_REGISTER_MENU    'target <target>'
CLI_REGISTER_COMMAND 'target <target> rename <new-name>'           'TARGET_RENAME \1 \2'
CLI_REGISTER_COMMAND 'target <target> realname'                    'TARGET_REAL \1'
CLI_REGISTER_COMMAND 'target <target> add alias <alias>'           'TARGET_ADD_ALIAS \1 \2'
CLI_REGISTER_COMMAND 'target <target> del alias <alias>'           'TARGET_DEL_ALIAS \2'
CLI_REGISTER_COMMAND 'target <target> list alias'                  'TARGET_LIST_ALIASES \1'
CLI_REGISTER_COMMAND 'target <target> display conf'                'TARGET_DISPLAY_CONF \1'
CLI_REGISTER_COMMAND 'target <target> set conf <variable> <value>' 'TARGET_SET_CONF \1 \2 \3'
CLI_REGISTER_COMMAND 'target <target> del conf <variable>'         'TARGET_SET_CONF \1 \2'

CLI_REGISTER_MENU    'target <target> ssh'                                      "Targets ssh related commands"
CLI_REGISTER_COMMAND 'target <target> ssh test'                                 'TARGET_SSH_TEST \1'
CLI_REGISTER_COMMAND 'target <target> ssh list logins'                          'TARGET_SSH_LIST_LOGINS \1'
CLI_REGISTER_COMMAND 'target <target> ssh add login <login>'                    'TARGET_SSH_ADD_LOGIN \1 \2'
CLI_REGISTER_COMMAND 'target <target> ssh del login <login>'                    'TARGET_SSH_DEL_LOGIN \1 \2'
CLI_REGISTER_COMMAND 'target [<login>@]<target> ssh edit config'                'TARGET_SSH_EDIT_CONFIG \1'
CLI_REGISTER_COMMAND 'target [<login>@]<target> ssh display config'             'TARGET_SSH_DISPLAY_CONFIG \1'
CLI_REGISTER_COMMAND 'target [<login>@]<target> ssh display full config'        'TARGET_SSH_DISPLAY_FULL_CONFIG \1'

CLI_REGISTER_COMMAND 'target <target> ssh display key'                          'TARGET_SSHKEY_DISPLAY \1'
CLI_REGISTER_COMMAND 'target <target> ssh edit key'                             'TARGET_SSHKEY_EDIT \1'
CLI_REGISTER_COMMAND 'target <target> ssh install key'                          'TARGET_SSHKEY_INSTALL \1'
CLI_REGISTER_COMMAND 'target <target> ssh use default key'                      'TARGET_SSHKEY_USE_DEFAULT \1'
CLI_REGISTER_COMMAND 'target <target> ssh update known_hosts'                   'TARGET_SSH_UPDATE_KNOWN_HOSTS \1'

CLI_REGISTER_MENU    'target [<login>@]<target> access'                         'Targets access related commands'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access info'                    'TARGET_ACCESS_INFO \1'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access list users'              'TARGET_ACCESS_LIST_USERS \1'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access add user <user>'         'TARGET_ACCESS_ADD_USER \1 \2'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access del user <user>'         'TARGET_ACCESS_DEL_USER \1 \2'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access list usergroups'         'TARGET_ACCESS_LIST_USERGROUPS \1'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access add usergroup <group>'   'TARGET_ACCESS_ADD_USERGROUP \1 \2'
CLI_REGISTER_COMMAND 'target [<login>@]<target> access del usergroup <group>'   'TARGET_ACCESS_DEL_USERGROUP \1 \2'



# use --force when CLI is called from remote
CLI_USE_READLINE --force --history-file ~/.sshgate_history
CLI_SET_PROMPT "sshGate"

[ ${SSHGATE_MAIL_SEND:-} = 'true' ] && MAIL_CREATE


# during test :
#  - don't print Wall message
#  - don't run the CLI (we will launch it manually)
#  - don't send mail
if [ "${SSHGATE_TEST:-}" != 'sshGateTest' ]; then
  MSG "sshGate administration Interface"
  MSG "By Patrick Guiran <pguiran@linagora.com>"
  BR
  MSG "Use 'help' command to list all avariable commands"
  BR

  CLI_RUN

  [ ${SSHGATE_MAIL_SEND:-} = 'true' ] \
    && MAIL_SEND "${SSHGATE_MAIL_SUBJECT} (${SSHKEY_USER})" "${SSHGATE_MAIL_TO}"
  [ $? -eq 2 ] && NOTICE "No modification noticed. Repport e-mail will not be sent"
fi

__SSHGATE_CLI__='Loaded' # mainly for tests
